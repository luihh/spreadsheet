---
import { Icon } from 'astro-icon/components'

const response = await fetch('https://opensheet.elk.sh/1NO2hZTsQqytkZdhCa8C6glF9FnzUq5HaW-TGMqzXqro/1')
const data = await response.json()

const CELL_COLORS = {
  TRUE: 'bg-green text-green-900',
  FALSE: 'bg-red text-red-900',
  ONGOING: 'bg-yellow text-yellow-900',
  MAYBE: 'bg-blue text-blue-900',
}

const TEXT_COLORS = {
  CYAN: 'text-sky',
  GREEN: 'text-green',
  YELLOW: 'text-yellow',
  RED: 'text-red'
}

const RATING_THRESHOLDS = {
  ENJOYMENT: [11, 8, 5],
  WORST_FAIL: [80, 60],
}

const TIER_COLORS = {
  "Beginner": "text-blue-400",
  "Easy": "text-cyan-200",
  "Medium": "text-green-300",
  "Hard": "text-yellow-200",
  "Very Hard": "text-yellow-500",
  "Insane": "text-red-500",
  "Extreme": "text-purple-400",
  "Remorseless": "text-violet-500",
  "Relentless": "text-violet-300",
  "Terrifying": "text-pink-200",
  "Catastrophic": "text-rose-400",
}; 

const getCellColor = (value) => CELL_COLORS[value] || '';
const getTierColor = (value) => TIER_COLORS[value] || '';

const getEnjoymentColor = (value) => {
  const ratingNumber = parseInt(value.split('/')[0]);
  if (!isNaN(ratingNumber)) {
    const thresholds = RATING_THRESHOLDS.ENJOYMENT;
    if (ratingNumber >= thresholds[0]) return TEXT_COLORS.CYAN;
    else if (ratingNumber >= thresholds[1]) return TEXT_COLORS.GREEN;
    else if (ratingNumber >= thresholds[2]) return TEXT_COLORS.YELLOW
    else return TEXT_COLORS.RED;
  } else return '';
};

const getWorstFailColor = (value) => {
  const worstFailNumber = parseInt(value.split('%')[0]);
  if (!isNaN(worstFailNumber)) {
    const thresholds = RATING_THRESHOLDS.WORST_FAIL;
    if (worstFailNumber >= thresholds[0]) return TEXT_COLORS.RED;
    else if (worstFailNumber >= thresholds[1]) return TEXT_COLORS.YELLOW;
    else return TEXT_COLORS.GREEN;
  } else return '';
};

const headers = data.length > 0 ? Object.keys(data[0]) : [];
---

<div class="w-full overflow-x-auto lg:w-auto">
  <table class="text-sm text-left rtl:text-right text-subtext0">
    <thead class="text-xm text-center uppercase text-overlay1 bg-mantle">
      <tr>
        {headers.map((header, index) => (
          <th key={index} scope="col" class="px-6 py-3">
            {header}
          </th>
        ))}
      </tr>
    </thead>
    <tbody>
      {data.map((row, rowIndex) => (
        <tr
          key={rowIndex}
          class="bg-crust border-b border-mantle">
          {Object.values(row).map((cell, cellIndex) => {
            let cellColumn = Object.keys(row)[cellIndex]
            return (
            <td
              key={cellIndex}
              class={`px-4 py-4 text-center font-bold whitespace-nowrap 
                ${cellColumn === '#' ? 'bg-mantle text-overlay1' : ''} 
                ${cellColumn === 'Level' ? 'text-text' : ''} 
                ${cellColumn === '100%' ? getCellColor(cell) : ''}
                ${cellColumn === 'Enjoyment' ? getEnjoymentColor(cell) : ''} 
                ${cellColumn === 'Worst Fail' ? getWorstFailColor(cell) : ''}
                ${cellColumn === 'Tier (NLW)' ? getTierColor(cell) : ''}
                `}
            >
              <div class="flex justify-center">
                {cellIndex === 2 && cell === 'TRUE' && <Icon name="Check" class="text-xl" />}
                {cellIndex === 2 && cell === 'ONGOING' && <Icon name="Ongoing" class="text-xl" />}
                {cellIndex === 2 && cell === 'MAYBE' && <Icon name="QuestionMark" class="text-xl" />}
                {cellIndex === 2 && cell === 'FALSE' && <Icon name="Cross" class="text-xl" />}
                {cellIndex !== 2 && cell}
              </div>
            </td>
          )
          })}
        </tr>
      ))}
    </tbody>
  </table>
</div>
